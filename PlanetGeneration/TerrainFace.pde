class TerrainFace {
  int resolution;
  PVector localUp;
  PVector axisA;
  PVector axisB;
  PVector[] vert;
  int[] tri;
  float scl = 300;
color c;
  TerrainFace(int resolution_, PVector localUp_) {
    resolution = resolution_;
    localUp = localUp_;

    axisA = new PVector(localUp.y, localUp.z, localUp.x);
    axisB = localUp.cross(axisA).copy();
    vert = new PVector[resolution * resolution];
    tri = new int[(resolution - 1) * (resolution - 1) * 6];

    constructMesh();
    
    c = color(random(255), random(255), random(255));
  }

  void constructMesh() {
    int triIndex = 0;

    for (int y = 0; y < resolution; y++) {
      for (int x = 0; x < resolution; x++) {

        int i = x + y * resolution;

        PVector percent = new PVector(x, y);
        percent.div(resolution - 1);
        PVector pointOnUnitCube = PVector.add(localUp, PVector.mult(axisA, percent.x - 0.5f).mult(2)).add(PVector.mult(axisB, percent.y - 0.5f).mult(2));
        //  PVector pointOnUnitCube = axisA.mult(percent.x - 0.5).mult(2).add(axisB.mult(percent.y - 0.5)).mult(2).add(localUp);




        PVector pointsOnSphere = pointOnUnitCube;
        vert[i] = pointsOnSphere.mult(scl);


        if (x != resolution - 1 && y != resolution - 1) {
          tri[triIndex] = i;
          tri[triIndex + 1] = i + resolution + 1;
          tri[triIndex + 2] = i + resolution;

          tri[triIndex + 3] = i;
          tri[triIndex + 4] = i + 1;
          tri[triIndex + 5] = i + resolution + 1;
          triIndex += 6;
        }
      }
    }
  }

  void show() {
    strokeWeight(3);
    stroke(c);
    noFill();

    for (PVector p : vert) {
      point(p.x, p.y, p.z);
    }


    //for (int i = 0; i < tri.length-5; i+=6) {
    //  line(vert[tri[i]].x, vert[tri[i]].y, vert[tri[i]].z, vert[tri[i+1]].x, vert[tri[i+1]].y, vert[tri[i+1]].z);
    //  line(vert[tri[i+1]].x, vert[tri[i+1]].y, vert[tri[i+1]].z, vert[tri[i+2]].x, vert[tri[i+2]].y, vert[tri[i+2]].z);
    //  line(vert[tri[i+2]].x, vert[tri[i+2]].y, vert[tri[i+2]].z, vert[tri[i+3]].x, vert[tri[i+3]].y, vert[tri[i+3]].z);
    //  line(vert[tri[i+3]].x, vert[tri[i+3]].y, vert[tri[i+3]].z, vert[tri[i+4]].x, vert[tri[i+4]].y, vert[tri[i+4]].z);
    //  line(vert[tri[i+4]].x, vert[tri[i+4]].y, vert[tri[i+4]].z, vert[tri[i+5]].x, vert[tri[i+5]].y, vert[tri[i+5]].z);
    //  line(vert[tri[i+5]].x, vert[tri[i+5]].y, vert[tri[i+5]].z, vert[tri[i]].x, vert[tri[i]].y, vert[tri[i]].z);
    //}

    //  for (int i = 0; i < vert.length; i++) {
    //    PVector pnt = new PVector(vert[i].x, vert[i].y, vert[i].z);
    //    point(pnt.x, pnt.y, pnt.z);
    //  }
  }
}
